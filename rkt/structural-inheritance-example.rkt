#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.4 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 126 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 14 #"Operator Mono\0"
0 12 91 -1 90 -1 1 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
44 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
46 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 116 31 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 41 128 38 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 132 60 36 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 81 112 203 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 68 0 203 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 116 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 142 28 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 21 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
0 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 148 0 211 0
0 0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 0 1 #"\0"
0 75 14 #"Operator Mono\0"
0.0 14 91 -1 90 -1 1 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 104 97 94
255 255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 223 83 32 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 242 44 64 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 64 126 231 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 102 102 234
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 118 110 107
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 123 151 38 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 104 97 94 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 61 151 184 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 102 102 234
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 195 63 243 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 242 255 64 0
0 0 -1 -1 0 1 #"\0"
0 75 14 #"Operator Mono\0"
0.0 16 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 59 117 140
255 255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 219 123 85 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 205 63 69 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 85 181 219 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 90 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 85 181 219 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 90 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 160 116 196
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 90 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 123 147 155
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 90 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 159 202 86 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 59 117 140 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 90 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 219 123 85 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 85 219 190 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 90 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 83 91 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 205 63 69 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 90 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 85 219 190 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 159 202 86 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 90 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 160 116 196
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 90 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 85 181 219 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 138 85 63 0
0 0 -1 -1 23 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1           0 884 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 200
(
 #"#reader(lib \"htdp-advanced-reader.ss\" \"lang\")((modname structura"
 #"l-inheritance-example) (read-case-sensitive #t) (teachpacks ()) (htd"
 #"p-settings #(#t constructor repeating-decimal #t #t none #f () #f)))"
) 0 0 4 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 19 #"cs111/define-struct"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; Structural Inheritance"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";; Here's the class hierarchy we'll be building:"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;        Shape"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";;        __|___"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";;       |      |"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";;    Circle  Rectangle"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";; A Shape is an ABSTRACT base type."
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";; Properties:"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";; - color, a valid Racket color string"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";; Methods:"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";; - render : Shape -> Image, a function to draw the shape"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";; - area : Shape -> Number, a function to compute the area of a sha"
 #"pe"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";; Abstract just means it's a template for subtypes, but"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";; we never call (make-shape ...) directly."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"shape"
0 0 24 3 2 #" ["
0 0 14 3 5 #"color"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 23 3 9 #"#:methods"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 25 #"; render : Shape -> Image"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"render"
0 0 24 3 1 #" "
0 0 14 3 2 #"sh"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 60
#"; Nothing to render right now because the shape has no size."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 11 #"empty-image"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 24 #"; area : Shape -> Number"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"area"
0 0 24 3 1 #" "
0 0 14 3 2 #"sh"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 61
#"; Nothing to compute right now because the shape has no size."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 37 #"; We'll return -1 to simplify things."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 21 3 2 #"-1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";; Now let's define some subtypes of Shape."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; A Circ is a subtype of Shape."
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";; Properties:"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";; - color, a valid Racket color string (inherited from Shape)"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";; - radius, a positive real number"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";; Methods:"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";; - render : Shape -> Image (inherited from Shape)"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; - area : Shape -> Number (inherited from Shape)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";; Note that we're calling our type `circ` because `circle`"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";; is already defined by the 2htdp/image library."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 2 #" ("
0 0 14 3 4 #"circ"
0 0 24 3 1 #" "
0 0 14 3 5 #"shape"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 60
#";; (circ shape) tells Racket we're inheriting properties and"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 56 #";; methods from the Shape type, so we don't need to list"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 41 #";; those inherited properties explicitly."
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 55 #";; We just need to add the new, Circ-specific property."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 6 #"radius"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 23 3 9 #"#:methods"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 26 #";; render : Shape -> Image"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 59
#";; Remeber that a Circ is a Shape (because of inheritance),"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 37 #";; so we can call `render` on a Circ."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"render"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 60
#";; Draw a circle with the same old function we know and love"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"circle"
0 0 24 3 2 #" ("
0 0 14 3 11 #"circ-radius"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 7 #"\"solid\""
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 17 3 57 #";; Remember, `color` is an INHERITED property of the base"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 17 3 57 #";; type Shape, so we need to use `shape-color` instead of"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 17 3 25 #";; `circ-color` to get it"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 11 #"shape-color"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 25 #";; area : Shape -> Number"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"area"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 2 #"pi"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 3 #"sqr"
0 0 24 3 2 #" ("
0 0 14 3 11 #"circ-radius"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";; Let's make a Circ"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"small-circ"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 43 #";; Notice the order of the property values:"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"make-circ"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 37 #";; (1) Inherited properties, in order"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 19 3 7 #"\"green\""
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 35 #";; (2) Subtype properties, in order"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 21 3 2 #"10"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; Let's try the Circ's `render` function"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; Notice how with methods, we don't use the typical"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; <StructType>-<FieldName> notation."
0 0 24 29 1 #"\n"
0 0 17 3 61
#";; i.e. instead of (circ-render ...) we just use (render ...)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"render"
0 0 24 3 1 #" "
0 0 14 3 10 #"small-circ"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";; "
0 12           4 17 90
(
 #"(#(struct:translate 10 10 #(struct:ellipse 20 20 0 255 \"green\")) #"
 #"(struct:bb 20 20 20) #f)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"render"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-circ"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"blue\""
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 17 3 1 #" "
0 12           4 17 96
(
 #"(#(struct:translate 100 100 #(struct:ellipse 200 200 0 255 \"blue\")"
 #") #(struct:bb 200 200 200) #f)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";; Area?"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"area"
0 0 24 3 1 #" "
0 0 14 3 10 #"small-circ"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";; #i314.1592653589793"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"area"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-circ"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 1 #" "
0 0 21 3 2 #"75"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";; #i17671.458676442588"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; A Rect is a subtype of Shape."
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";; Properties:"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";; - color, a valid Racket color string (inherited from Shape)"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";; - width, a positive real number"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";; - length, a positive real number"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";; Methods:"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";; - render : Shape -> Image (inherited from Shape)"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; - area : Shape -> Number (inherited from Shape)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";; Note that we're calling our type `rect` because `rectangle`"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";; is already defined by the 2htdp/image library."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rect"
0 0 24 3 1 #" "
0 0 14 3 5 #"shape"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 35 #";; Additional fields: width, length"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"width"
0 0 24 3 1 #" "
0 0 14 3 6 #"length"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 23 3 9 #"#:methods"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 26 #";; render : Shape -> Image"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"render"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"rectangle"
0 0 24 3 2 #" ("
0 0 14 3 10 #"rect-width"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 11 #"rect-length"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 19 3 7 #"\"solid\""
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 54 #";; Remember, `color` is an inherited property of Shape"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 44 #";; so we use `shape-color`, not `rect-color`"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 11 #"shape-color"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 25 #";; area : Shape -> Number"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"area"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 10 #"rect-width"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 11 #"rect-length"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";; Make some Rects"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"big-rect"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"make-rect"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 37 #";; (1) Inherited properties, in order"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 19 3 5 #"\"red\""
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 35 #";; (2) Subtype properties, in order"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 21 3 3 #"150"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"actually-square"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"make-rect"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";; Notice that `render` intelligently does the right thing, dependin"
 #"g"
) 0 0 24 29 1 #"\n"
0 0 17 3 38 #";; on whether we pass a Rect or a Circ"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"render"
0 0 24 3 1 #" "
0 0 14 3 8 #"big-rect"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";; "
0 12           4 17 231
(
 #"(#(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 "
 #"0 0 0 0) #(struct:pulled-point 0 0 150 0 0 0) #(struct:pulled-point "
 #"0 0 150 100 0 0) #(struct:pulled-point 0 0 0 100 0 0)) 255 \"red\"))"
 #" #(struct:bb 150 100 100) #f)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"render"
0 0 24 3 1 #" "
0 0 14 3 15 #"actually-square"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";; "
0 12           4 17 226
(
 #"(#(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 "
 #"0 0 0 0) #(struct:pulled-point 0 0 50 0 0 0) #(struct:pulled-point 0"
 #" 0 50 50 0 0) #(struct:pulled-point 0 0 0 50 0 0)) 255 \"black\")) #"
 #"(struct:bb 50 50 50) #f)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; Same with `area`"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"area"
0 0 24 3 1 #" "
0 0 14 3 8 #"big-rect"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";; 15000"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"area"
0 0 24 3 1 #" "
0 0 14 3 15 #"actually-square"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";; 2500"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";; Remember, we're dealing with regular structs and functions, so"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; all the normal stuff applies."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 14 #"cs111/iterated"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 19 3 25 #"\"Using iterated-above...\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"iterated-above"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 66
#";; render : Shape -> Image is still a normal image-making function"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 6 #"render"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-rect"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"green\""
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 21 3 1 #"5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";; "
0 12           4 17 1296
(
 #"(#(struct:overlay #(struct:translate 10 0 #(struct:overlay #(struct:"
 #"translate 10 0 #(struct:overlay #(struct:translate 10 0 #(struct:ove"
 #"rlay #(struct:translate 10 0 #(struct:translate 0 0 #(struct:polygon"
 #" (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 0 0 0"
 #" 0) #(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 0 0"
 #" 0 0)) 255 \"green\"))) #(struct:translate 0 0 #(struct:translate 0 "
 #"0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pull"
 #"ed-point 0 0 20 0 0 0) #(struct:pulled-point 0 0 20 20 0 0) #(struct"
 #":pulled-point 0 0 0 20 0 0)) 255 \"green\"))))) #(struct:translate 0"
 #" 20 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0"
 #" 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pulled-poin"
 #"t 0 0 40 40 0 0) #(struct:pulled-point 0 0 0 40 0 0)) 255 \"green\")"
 #")))) #(struct:translate 0 60 #(struct:translate 0 0 #(struct:polygon"
 #" (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 60 0 "
 #"0 0) #(struct:pulled-point 0 0 60 60 0 0) #(struct:pulled-point 0 0 "
 #"0 60 0 0)) 255 \"green\"))))) #(struct:translate 0 120 #(struct:tran"
 #"slate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(str"
 #"uct:pulled-point 0 0 80 0 0 0) #(struct:pulled-point 0 0 80 80 0 0) "
 #"#(struct:pulled-point 0 0 0 80 0 0)) 255 \"green\")))) #(struct:bb 8"
 #"0 200 200) #f)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; We can do everything as usual with structs:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 5 #"circ?"
0 0 24 3 1 #" "
0 0 14 3 8 #"big-rect"
0 0 24 3 3 #")  "
0 0 17 3 7 #"; false"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 5 #"circ?"
0 0 24 3 1 #" "
0 0 14 3 10 #"small-circ"
0 0 24 3 3 #")  "
0 0 17 3 6 #"; true"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"shape?"
0 0 24 3 1 #" "
0 0 14 3 8 #"big-rect"
0 0 24 3 3 #")  "
0 0 17 3 11 #"; true (!!)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 5 #"circ?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-rect"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"blue\""
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 4 #"))  "
0 0 17 3 7 #"; false"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 5 #"circ?"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"hello\""
0 0 24 3 3 #")  "
0 0 17 3 7 #"; false"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 19 3 19 #"\"Original big-rect\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"render"
0 0 24 3 1 #" "
0 0 14 3 8 #"big-rect"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";; "
0 12           4 17 231
(
 #"(#(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 "
 #"0 0 0 0) #(struct:pulled-point 0 0 150 0 0 0) #(struct:pulled-point "
 #"0 0 150 100 0 0) #(struct:pulled-point 0 0 0 100 0 0)) 255 \"red\"))"
 #" #(struct:bb 150 100 100) #f)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";; Set! struct properties as usual"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 15 #"set-rect-width!"
0 0 24 3 1 #" "
0 0 14 3 8 #"big-rect"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 17 3 29 #";; Access properties as usual"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"rect-width"
0 0 24 3 1 #" "
0 0 14 3 8 #"big-rect"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 19 3 23 #"\"After doubling width:\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"render"
0 0 24 3 1 #" "
0 0 14 3 8 #"big-rect"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";; "
0 12           4 17 231
(
 #"(#(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 "
 #"0 0 0 0) #(struct:pulled-point 0 0 300 0 0 0) #(struct:pulled-point "
 #"0 0 300 100 0 0) #(struct:pulled-point 0 0 0 100 0 0)) 255 \"red\"))"
 #" #(struct:bb 300 100 100) #f)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";; Notice that we always treat inherited properties"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";; as attached to their original types, not the"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";; descendant types."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 16 #"set-shape-color!"
0 0 24 3 2 #"  "
0 0 17 3 23 #"; Not `set-rect-color!`"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"big-rect"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"yellow\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 19 3 23 #"\"After changing color:\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"render"
0 0 24 3 1 #" "
0 0 14 3 8 #"big-rect"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";; "
0 12           4 17 234
(
 #"(#(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 "
 #"0 0 0 0) #(struct:pulled-point 0 0 300 0 0 0) #(struct:pulled-point "
 #"0 0 300 100 0 0) #(struct:pulled-"
 #"point 0 0 0 100 0 0)) 255 \"yellow\")) #(struct:bb 300 100 100) #f)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; Lists of structs work as usual"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"shapes"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 9 #"make-circ"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"firebrick\""
0 0 24 3 1 #" "
0 0 21 3 2 #"30"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 9 #"make-rect"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"yellow\""
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 9 #"make-circ"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"blue\""
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"rendered-shapes"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 6 #"render"
0 0 24 3 1 #" "
0 0 14 3 6 #"shapes"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 19 3 39 #"\"Images rendered from a list of shapes\""
0 0 24 29 1 #"\n"
0 0 14 3 15 #"rendered-shapes"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";; "
0 12           4 17 89
(
 #"(#(struct:translate 20 20 #(struct:ellipse 40 40 0 255 \"blue\")) #("
 #"struct:bb 40 40 40) #f)"
) 0 0 17 3 1 #" "
0 12           4 17 227
(
 #"(#(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 "
 #"0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pulled-point 0"
 #" 0 40 50 0 0) #(struct:pulled-point 0 0 0 50 0 0)) 255 \"yellow\")) "
 #"#(struct:bb 40 50 50) #f)"
) 0 0 17 3 1 #" "
0 12           4 17 94
(
 #"(#(struct:translate 30 30 #(struct:ellipse 60 60 0 255 \"firebrick\""
 #")) #(struct:bb 60 60 60) #f)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 19 3 39 #"\"Result of folding all images into one\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 5 #"foldl"
0 0 24 3 1 #" "
0 0 14 3 7 #"overlay"
0 0 24 3 1 #" "
0 0 14 3 11 #"empty-image"
0 0 24 3 1 #" "
0 0 14 3 15 #"rendered-shapes"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";; "
0 12           4 17 757
(
 #"(#(struct:overlay #(struct:translate 10 10 #(struct:translate 20 20 "
 #"#(struct:ellipse 40 40 0 255 \"blue\"))) #(struct:translate 0 0 #(st"
 #"ruct:overlay #(struct:translate 10 5 #(struct:translate 0 0 #(struct"
 #":polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0"
 #" 0 40 0 0 0) #(struct:pulled-point 0 0 40 50 0 0) #(struct:pulled-po"
 #"int 0 0 0 50 0 0)) 255 \"yellow\"))) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 0 0 #(struct:translate 30 30 #(struct:el"
 #"lipse 60 60 0 255 \"firebrick\"))) #(struct:translate 30 30 #(struct"
 #":translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) "
 #"#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 0 0 0 0"
 #") #(struct:pulled-point 0 0 0 0 0 0)) 255 \"black\")))))))) #(struct"
 #":bb 60 60 60) #f)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";; Filter shapes by size"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"large-shapes"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"filter"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 19 #";; Shape -> Boolean"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 4 #"area"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 21 3 4 #"2000"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 6 #"shapes"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 19 3 55 #"\"Shapes with areas greater than or equal to 2000 units\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 6 #"render"
0 0 24 3 1 #" "
0 0 14 3 12 #"large-shapes"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";; "
0 0 17 3 8 #"#<list: "
0 12           4 17 94
(
 #"(#(struct:translate 30 30 #(struct:ellipse 60 60 0 255 \"firebrick\""
 #")) #(struct:bb 60 60 60) #f)"
) 0 0 17 3 1 #" "
0 12           4 17 227
(
 #"(#(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 "
 #"0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pulled-point 0"
 #" 0 40 50 0 0) #(struct:pulled-point 0 0 0 50 0 0)) 255 \"yellow\")) "
 #"#(struct:bb 40 50 50) #f)"
) 0 0 17 3 1 #">"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";; Imperative functions and stuff work too"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"for-each"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 16 #";; Shape -> Void"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 58
#";; Side effect: sets the color of the given Shape to green"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 16 #"set-shape-color!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"green\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 6 #"shapes"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 19 3 33 #"\"Shapes after we made them green\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 6 #"render"
0 0 24 3 1 #" "
0 0 14 3 6 #"shapes"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";; "
0 0 17 3 8 #"#<list: "
0 12           4 17 90
(
 #"(#(struct:translate 30 30 #(struct:ellipse 60 60 0 255 \"green\")) #"
 #"(struct:bb 60 60 60) #f)"
) 0 0 17 3 1 #" "
0 12           4 17 226
(
 #"(#(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 "
 #"0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pulled-point 0"
 #" 0 40 50 0 0) #(struct:pulled-point 0 0 0 50 0 0)) 255 \"green\")) #"
 #"(struct:bb 40 50 50) #f)"
) 0 0 17 3 1 #" "
0 12           4 17 90
(
 #"(#(struct:translate 20 20 #(struct:ellipse 40 40 0 255 \"green\")) #"
 #"(struct:bb 40 40 40) #f)"
) 0 0 17 3 1 #">"
0           0
